



name: UI + API + Parser Tests

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}  

permissions:
  contents: read

jobs:
  # === 1) UI (Selenium) + Allure ===
  ui-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      FIREFLY_URL: "http://54.74.74.176:8082"
      EMAIL: ${{ secrets.FIREFLY_EMAIL }}
      PASSWORD: ${{ secrets.FIREFLY_PASSWORD }}
      HEADLESS: "true"
      CI: "true"
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Checkout Firefly III repository (PR code)
        uses: actions/checkout@v4

      - name: Checkout Firefly-UI (tests repo)
        uses: actions/checkout@v4
        with:
          repository: tmeraslan/firefly-UI
          path: firefly-UI

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Chrome (stable)
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd firefly-UI
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install "selenium>=4.13" pillow pytest pytest-timeout allure-pytest

      - name: Wait for Firefly to be ready
        run: |
          echo "Waiting for ${FIREFLY_URL}..."
          for i in $(seq 1 40); do
            if curl -fsSL -o /dev/null "${FIREFLY_URL}/login" || curl -fsSL -o /dev/null "${FIREFLY_URL}/api/v1/ping"; then
              echo "‚úÖ Firefly is reachable"; exit 0
            fi
            echo "Attempt $i/40: not ready, sleeping 3s..."; sleep 3
          done
          echo "‚ùå Firefly did not become ready."
          curl -I "${FIREFLY_URL}/login" || true
          exit 1

      - name: Run Selenium UI tests (headless) + Allure results
        run: |
          cd firefly-UI
          ls -R tests || true
          pytest -v --disable-warnings --timeout=120 \  -k "not openai and not api and not parser" \--alluredir=allure-results \tests


      - name: Install Allure CLI
        run: npm i -g allure-commandline

      - name: Generate Allure HTML report
        run: |
          cd firefly-UI
          allure generate allure-results --clean -o allure-report || echo "No Allure results to generate"

      - name: Upload UI screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-screenshots
          path: firefly-UI/screenshots/**
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload UI Allure results (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-allure-results
          path: firefly-UI/allure-results
          retention-days: 14

      - name: Upload UI Allure HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-allure-report
          path: firefly-UI/allure-report
          if-no-files-found: ignore
          retention-days: 14

  # === 2) receipt-parser (pytest) 
  receipt-parser-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout receipt-parser
        uses: actions/checkout@v4
        with:
          repository: tmeraslan/receipt-parser
          path: receipt-parser

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          cd receipt-parser
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Run parser tests (no Allure)
        run: |
          cd receipt-parser
          pytest tests -v --disable-warnings

      - name: Upload parser cache (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: receipt-parser-artifacts
          path: receipt-parser/.pytest_cache/**
          if-no-files-found: ignore
          retention-days: 7

  # === 3) firefly API tests (Auto-detect) 
  firefly-api-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      FIREFLY_URL: "http://54.74.74.176:8082"
      FIREFLY_API_TOKEN: ${{ secrets.FIREFLY_API_TOKEN }}
      CI: "true"
    steps:
      - name: Checkout firefly (API repo)
        uses: actions/checkout@v4
        with:
          repository: tmeraslan/firefly
          path: firefly-api

      - name: Detect & run API tests
        shell: bash
        working-directory: firefly-api
        run: |
          set -Eeuo pipefail
          echo "üîé Detecting project type in $(pwd)..."

          has_php=false
          has_py=false
          has_node=false
          has_postman=false

          # Detect project type(s)
          if [[ -f composer.json ]]; then
            has_php=true
          fi

          if [[ -f requirements.txt ]]; then
            has_py=true
          elif compgen -G "tests/*.py" >/dev/null 2>&1; then
            has_py=true
          fi

          if [[ -f package.json ]]; then
            has_node=true
          fi

          if compgen -G "*.postman_collection.json" >/dev/null 2>&1; then
            has_postman=true
          fi

          if ${has_php}; then
            echo "‚Üí PHP project detected"
            sudo apt-get update
            sudo apt-get install -y php-cli php-xml php-mbstring php-curl unzip
            curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
            composer install --no-interaction --prefer-dist
            if [[ -x vendor/bin/pest ]]; then
              vendor/bin/pest -v
            elif [[ -f phpunit.xml || -f phpunit.xml.dist ]]; then
              vendor/bin/phpunit --testdox
            else
              echo "‚ùå No Pest/PHPUnit config found."
              exit 1
            fi

          elif ${has_py}; then
            echo "‚Üí Python API tests detected"
            python -m pip install --upgrade pip
            if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
            pip install pytest requests
            pytest tests -v --disable-warnings

          elif ${has_node}; then
            echo "‚Üí Node/Postman project detected"
            npm ci || npm install
            if ${has_postman}; then
              npm i -g newman
              shopt -s nullglob
              if compgen -G "*.postman_environment.json" >/dev/null 2>&1; then
                for c in *.postman_collection.json; do
                  for e in *.postman_environment.json; do
                    echo "Running newman: $c with $e"
                    newman run "$c" -e "$e" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
                  done
                done
              else
                for c in *.postman_collection.json; do
                  echo "Running newman: $c"
                  newman run "$c" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
                done
              fi
            else
              echo "Running npm test"
              npm test --silent || npm run test
            fi

          else
            echo "‚ùå Could not detect project type (no composer.json / requirements.txt / package.json / tests)."
            ls -la
            exit 1
          fi







# name: UI + API + Parser Tests

# on:
#   pull_request:
#     branches: [ main ]
#   workflow_dispatch: {}  

# permissions:
#   contents: read

# jobs:
#   # === 1) UI (Selenium) + Allure ===
#   ui-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     env:
#       FIREFLY_URL: "http://54.74.74.176:8082"
#       EMAIL: ${{ secrets.FIREFLY_EMAIL }}
#       PASSWORD: ${{ secrets.FIREFLY_PASSWORD }}
#       HEADLESS: "true"
#       CI: "true"
#       PYTHONUNBUFFERED: "1"
#     steps:
#       - name: Checkout Firefly III repository (PR code)
#         uses: actions/checkout@v4

#       - name: Checkout Firefly-UI (tests repo)
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/firefly-UI
#           path: firefly-UI

#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Setup Chrome (stable)
#         uses: browser-actions/setup-chrome@v1
#         with:
#           chrome-version: stable

#       - name: Install Python dependencies
#         run: |
#           python -m pip install --upgrade pip
#           cd firefly-UI
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install "selenium>=4.13" pillow pytest pytest-timeout allure-pytest

#       - name: Wait for Firefly to be ready
#         run: |
#           echo "Waiting for ${FIREFLY_URL}..."
#           for i in $(seq 1 40); do
#             if curl -fsSL -o /dev/null "${FIREFLY_URL}/login" || curl -fsSL -o /dev/null "${FIREFLY_URL}/api/v1/ping"; then
#               echo "‚úÖ Firefly is reachable"; exit 0
#             fi
#             echo "Attempt $i/40: not ready, sleeping 3s..."; sleep 3
#           done
#           echo "‚ùå Firefly did not become ready."
#           curl -I "${FIREFLY_URL}/login" || true
#           exit 1

#       - name: Run Selenium UI tests (headless) + Allure results
#         run: |
#           cd firefly-UI
#           pytest tests/ -v --disable-warnings --timeout=120 --alluredir=allure-results

#       - name: Install Allure CLI
#         run: npm i -g allure-commandline

#       - name: Generate Allure HTML report
#         run: |
#           cd firefly-UI
#           allure generate allure-results --clean -o allure-report || echo "No Allure results to generate"

#       - name: Upload UI screenshots
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-screenshots
#           path: firefly-UI/screenshots/**
#           if-no-files-found: ignore
#           retention-days: 14

#       - name: Upload UI Allure results (raw)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-allure-results
#           path: firefly-UI/allure-results
#           retention-days: 14

#       - name: Upload UI Allure HTML report
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-allure-report
#           path: firefly-UI/allure-report
#           if-no-files-found: ignore
#           retention-days: 14

#   # === 2) receipt-parser (pytest) 
#   receipt-parser-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 20
#     steps:
#       - name: Checkout receipt-parser
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/receipt-parser
#           path: receipt-parser

#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Install deps
#         run: |
#           python -m pip install --upgrade pip
#           cd receipt-parser
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install pytest

#       - name: Run parser tests (no Allure)
#         run: |
#           cd receipt-parser
#           pytest tests -v --disable-warnings

#       - name: Upload parser cache (optional)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: receipt-parser-artifacts
#           path: receipt-parser/.pytest_cache/**
#           if-no-files-found: ignore
#           retention-days: 7

#   # === 3) firefly API tests (Auto-detect) 
#   firefly-api-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     env:
#       FIREFLY_URL: "http://54.74.74.176:8082"
#       FIREFLY_API_TOKEN: ${{ secrets.FIREFLY_API_TOKEN }}
#       CI: "true"
#     steps:
#       - name: Checkout firefly (API repo)
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/firefly
#           path: firefly-api

#       - name: Detect & run API tests
#         shell: bash
#         working-directory: firefly-api
#         run: |
#           set -Eeuo pipefail
#           echo "üîé Detecting project type in $(pwd)..."

#           has_php=false
#           has_py=false
#           has_node=false
#           has_postman=false

#           # Detect project type(s)
#           if [[ -f composer.json ]]; then
#             has_php=true
#           fi

#           if [[ -f requirements.txt ]]; then
#             has_py=true
#           elif compgen -G "tests/*.py" >/dev/null 2>&1; then
#             has_py=true
#           fi

#           if [[ -f package.json ]]; then
#             has_node=true
#           fi

#           if compgen -G "*.postman_collection.json" >/dev/null 2>&1; then
#             has_postman=true
#           fi

#           if ${has_php}; then
#             echo "‚Üí PHP project detected"
#             sudo apt-get update
#             sudo apt-get install -y php-cli php-xml php-mbstring php-curl unzip
#             curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
#             composer install --no-interaction --prefer-dist
#             if [[ -x vendor/bin/pest ]]; then
#               vendor/bin/pest -v
#             elif [[ -f phpunit.xml || -f phpunit.xml.dist ]]; then
#               vendor/bin/phpunit --testdox
#             else
#               echo "‚ùå No Pest/PHPUnit config found."
#               exit 1
#             fi

#           elif ${has_py}; then
#             echo "‚Üí Python API tests detected"
#             python -m pip install --upgrade pip
#             if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
#             pip install pytest requests
#             pytest tests -v --disable-warnings

#           elif ${has_node}; then
#             echo "‚Üí Node/Postman project detected"
#             npm ci || npm install
#             if ${has_postman}; then
#               npm i -g newman
#               shopt -s nullglob
#               if compgen -G "*.postman_environment.json" >/dev/null 2>&1; then
#                 for c in *.postman_collection.json; do
#                   for e in *.postman_environment.json; do
#                     echo "Running newman: $c with $e"
#                     newman run "$c" -e "$e" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
#                   done
#                 done
#               else
#                 for c in *.postman_collection.json; do
#                   echo "Running newman: $c"
#                   newman run "$c" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
#                 done
#               fi
#             else
#               echo "Running npm test"
#               npm test --silent || npm run test
#             fi

#           else
#             echo "‚ùå Could not detect project type (no composer.json / requirements.txt / package.json / tests)."
#             ls -la
#             exit 1
#           fi
















# name: UI + API + Parser Tests

# on:
#   pull_request:
#     branches: [ main ]
#   # push:
#   #   branches: [ main ]

# permissions:
#   contents: read
#   pages: write
#   id-token: write

# jobs:
#   # === 1) UI (Selenium) + Allure ===
#   ui-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     env:
#       FIREFLY_URL: "http://54.75.52.138:8082"
#       EMAIL: ${{ secrets.FIREFLY_EMAIL }}
#       PASSWORD: ${{ secrets.FIREFLY_PASSWORD }}
#       HEADLESS: "true"
#       CI: "true"
#       PYTHONUNBUFFERED: "1"
#     steps:
#       - name: Checkout Firefly III repository (PR code)
#         uses: actions/checkout@v4

#       - name: Checkout Firefly-UI (tests repo)
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/firefly-UI
#           path: firefly-UI

#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Setup Chrome (stable)
#         uses: browser-actions/setup-chrome@v1
#         with:
#           chrome-version: stable

#       - name: Install Python dependencies
#         run: |
#           python -m pip install --upgrade pip
#           cd firefly-UI
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install "selenium>=4.13" pillow pytest pytest-timeout allure-pytest

#       - name: Wait for Firefly to be ready
#         run: |
#           echo "Waiting for ${FIREFLY_URL}..."
#           for i in $(seq 1 40); do
#             if curl -fsSL -o /dev/null "${FIREFLY_URL}/login" || curl -fsSL -o /dev/null "${FIREFLY_URL}/api/v1/ping"; then
#               echo "‚úÖ Firefly is reachable"; exit 0
#             fi
#             echo "Attempt $i/40: not ready, sleeping 3s..."; sleep 3
#           done
#           echo "‚ùå Firefly did not become ready."
#           curl -I "${FIREFLY_URL}/login" || true
#           exit 1

#       - name: Run Selenium UI tests (headless) + Allure results
#         run: |
#           cd firefly-UI
#           pytest tests/ -v --disable-warnings --timeout=120 --alluredir=allure-results

#       - name: Install Allure CLI
#         run: npm i -g allure-commandline

#       - name: Generate Allure HTML report
#         run: |
#           cd firefly-UI
#           allure generate allure-results --clean -o allure-report || echo "No Allure results to generate"

#       - name: Upload UI screenshots
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-screenshots
#           path: firefly-UI/screenshots/**
#           if-no-files-found: ignore

#       - name: Upload UI Allure results (raw)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-allure-results
#           path: firefly-UI/allure-results

#       - name: Upload UI Allure HTML report
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-allure-report
#           path: firefly-UI/allure-report

#   # === 2) receipt-parser (pytest) ‚Äî ◊ë◊ú◊ô Allure ===
#   receipt-parser-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 20
#     steps:
#       - name: Checkout receipt-parser
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/receipt-parser
#           path: receipt-parser

#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Install deps
#         run: |
#           python -m pip install --upgrade pip
#           cd receipt-parser
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install pytest

#       - name: Run parser tests (no Allure)
#         run: |
#           cd receipt-parser
#           pytest tests -v --disable-warnings

#       - name: Upload parser cache (optional)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: receipt-parser-artifacts
#           path: receipt-parser/.pytest_cache/**
#           if-no-files-found: ignore

#   # === 3) firefly API tests (Auto-detect) ‚Äî ◊ë◊ú◊ô Allure ===
#   firefly-api-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     env:
#       FIREFLY_URL: "http://54.75.52.138:8082"
#       FIREFLY_API_TOKEN: ${{ secrets.FIREFLY_API_TOKEN }}
#       CI: "true"
#     steps:
#       - name: Checkout firefly (API repo)
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/firefly
#           path: firefly-api

#       - name: Detect & run API tests
#         shell: bash
#         working-directory: firefly-api
#         run: |
#           set -Eeuo pipefail
#           echo "üîé Detecting project type in $(pwd)..."

#           has_php=false
#           has_py=false
#           has_node=false
#           has_postman=false

#           [[ -f composer.json ]] && has_php=true
#           if [[ -f requirements.txt ]]; then
#             has_py=true
#           elif compgen -G "tests/*.py" >/dev/null; then
#             has_py=true
#           fi
#           [[ -f package.json ]] && has_node=true
#           compgen -G "*.postman_collection.json" >/dev/null && has_postman=true

#           if $has_php; then
#             echo "‚Üí PHP project detected"
#             sudo apt-get update
#             sudo apt-get install -y php-cli php-xml php-mbstring php-curl unzip
#             curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
#             composer install --no-interaction --prefer-dist
#             if [[ -x vendor/bin/pest ]]; then
#               vendor/bin/pest -v
#             elif [[ -f phpunit.xml || -f phpunit.xml.dist ]]; then
#               vendor/bin/phpunit --testdox
#             else
#               echo "‚ùå No Pest/PHPUnit config found."
#               exit 1
#             fi

#           elif $has_py; then
#             echo "‚Üí Python API tests detected"
#             python -m pip install --upgrade pip
#             if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
#             pip install pytest requests
#             pytest tests -v --disable-warnings

#           elif $has_node; then
#             echo "‚Üí Node/Postman project detected"
#             npm ci || npm install
#             if $has_postman; then
#               npm i -g newman
#               shopt -s nullglob
#               if compgen -G "*.postman_environment.json" >/dev/null; then
#                 for c in *.postman_collection.json; do
#                   for e in *.postman_environment.json; do
#                     echo "Running newman: $c with $e"
#                     newman run "$c" -e "$e" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
#                   done
#                 done
#               else
#                 for c in *.postman_collection.json; do
#                   echo "Running newman: $c"
#                   newman run "$c" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
#                 done
#               fi
#             else
#               echo "Running npm test"
#               npm test --silent || npm run test
#             fi

#           else
#             echo "‚ùå Could not detect project type (no composer.json / requirements.txt / package.json / tests)."
#             ls -la
#             exit 1
#           fi





















# name: UI + API + Parser Tests

# on:
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read

# jobs:
#   ui-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     env:
#       FIREFLY_URL: "http://108.130.117.131:8082"
#       EMAIL: ${{ secrets.FIREFLY_EMAIL }}
#       PASSWORD: ${{ secrets.FIREFLY_PASSWORD }}
#       HEADLESS: "true"
#       CI: "true"
#       PYTHONUNBUFFERED: "1"
#     steps:
#       - name: Checkout Firefly III repository (PR code)
#         uses: actions/checkout@v4

#       - name: Checkout Firefly-UI (tests repo)
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/firefly-UI
#           path: firefly-UI

#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Setup Chrome (stable)
#         uses: browser-actions/setup-chrome@v1
#         with:
#           chrome-version: stable

#       - name: Install Python dependencies
#         run: |
#           python -m pip install --upgrade pip
#           cd firefly-UI
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install "selenium>=4.13" pillow pytest pytest-timeout

#       - name: Wait for Firefly to be ready
#         run: |
#           echo "Waiting for ${FIREFLY_URL}..."
#           for i in $(seq 1 40); do
#             if curl -fsSL -o /dev/null "${FIREFLY_URL}/login" || curl -fsSL -o /dev/null "${FIREFLY_URL}/api/v1/ping"; then
#               echo "‚úÖ Firefly is reachable"; exit 0
#             fi
#             echo "Attempt $i/40: not ready, sleeping 3s..."; sleep 3
#           done
#           echo "‚ùå Firefly did not become ready."
#           curl -I "${FIREFLY_URL}/login" || true
#           exit 1

#       - name: Run Selenium UI tests (headless)
#         run: |
#           cd firefly-UI
#           pytest tests/ -v --disable-warnings --timeout=120

#       - name: Upload UI artifacts (optional)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-test-artifacts
#           path: |
#             reports/**
#             screenshots/**
#           if-no-files-found: ignore

#   # === 2) receipt-parser ===
#   receipt-parser-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 20
#     steps:
#       - name: Checkout receipt-parser
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/receipt-parser
#           path: receipt-parser
          

#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Install deps
#         run: |
#           python -m pip install --upgrade pip
#           cd receipt-parser
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install pytest

#       - name: Run tests
#         run: |
#           cd receipt-parser
#           pytest tests -v --disable-warnings

#       - name: Upload parser artifacts (optional)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: receipt-parser-artifacts
#           path: |
#             receipt-parser/.pytest_cache/**
#           if-no-files-found: ignore

#   # === 3) firefly API tests (auto-detect: PHP/Python/Postman/Node) ===
#   firefly-api-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     env:
#       FIREFLY_URL: "http://108.130.117.131:8082"
#       FIREFLY_API_TOKEN: ${{ secrets.FIREFLY_API_TOKEN }}  
#       CI: "true"
#     steps:
#       - name: Checkout firefly (API repo)
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/firefly
#           path: firefly-api


#       - name: Detect & run API tests
#         shell: bash
#         working-directory: firefly-api
#         run: |
#           set -Eeuo pipefail
#           echo "üîé Detecting project type in $(pwd)..."

#           has_php=false
#           has_py=false
#           has_node=false
#           has_postman=false

#           [[ -f composer.json ]] && has_php=true
#           # ◊ê◊ù ◊ô◊© requirements.txt ◊ê◊ï ◊ß◊ë◊¶◊ô ◊ò◊°◊ò◊ô◊ù ◊ë-Python
#           if [[ -f requirements.txt ]]; then
#             has_py=true
#           elif compgen -G "tests/*.py" >/dev/null; then
#             has_py=true
#           fi
#           [[ -f package.json ]] && has_node=true
#           compgen -G "*.postman_collection.json" >/dev/null && has_postman=true

#           if $has_php; then
#             echo "‚Üí PHP project detected"
#             sudo apt-get update
#             sudo apt-get install -y php-cli php-xml php-mbstring php-curl unzip
#             curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
#             composer install --no-interaction --prefer-dist
#             if [[ -x vendor/bin/pest ]]; then
#               vendor/bin/pest -v
#             elif [[ -f phpunit.xml || -f phpunit.xml.dist ]]; then
#               vendor/bin/phpunit --testdox
#             else
#               echo "‚ùå No Pest/PHPUnit config found."
#               exit 1
#             fi

#           elif $has_py; then
#             echo "‚Üí Python API tests detected"
#             python -m pip install --upgrade pip
#             if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
#             pip install pytest requests
#             pytest tests -v --disable-warnings

#           elif $has_node; then
#             echo "‚Üí Node/Postman project detected"
#             npm ci || npm install
#             if $has_postman; then
#               npm i -g newman
#               shopt -s nullglob
#               if compgen -G "*.postman_environment.json" >/dev/null; then
#                 for c in *.postman_collection.json; do
#                   for e in *.postman_environment.json; do
#                     echo "Running newman: $c with $e"
#                     newman run "$c" -e "$e" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
#                   done
#                 done
#               else
#                 for c in *.postman_collection.json; do
#                   echo "Running newman: $c"
#                   newman run "$c" --env-var baseUrl="${FIREFLY_URL}" --env-var token="${FIREFLY_API_TOKEN}"
#                 done
#               fi
#             else
#               echo "Running npm test"
#               npm test --silent || npm run test
#             fi

#           else
#             echo "‚ùå Could not detect project type (no composer.json / requirements.txt / package.json / tests)."
#             ls -la
#             exit 1
#           fi


























# name: UI Tests

# on:
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read

# jobs:
#   ui-tests:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30

#     env:
#       FIREFLY_URL: "http://54.217.40.63:8080"   # ‚Üê ◊î-URL ◊î◊ó◊ô◊¶◊ï◊†◊ô ◊©◊ú◊ö
#       EMAIL: ${{ secrets.FIREFLY_EMAIL }}
#       PASSWORD: ${{ secrets.FIREFLY_PASSWORD }}
#       HEADLESS: "true"
#       CI: "true"
#       PYTHONUNBUFFERED: "1"

#     steps:
#       - name: Checkout Firefly III repository (PR code)
#         uses: actions/checkout@v4

#       - name: Checkout Firefly-UI (tests repo)
#         uses: actions/checkout@v4
#         with:
#           repository: tmeraslan/firefly-UI
#           path: firefly-UI

#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Setup Chrome (stable)
#         uses: browser-actions/setup-chrome@v1
#         with:
#           chrome-version: stable

#       - name: Install Python dependencies
#         run: |
#           python -m pip install --upgrade pip
#           cd firefly-UI
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#           pip install "selenium>=4.13" pillow pytest pytest-timeout

#       - name: Show versions (debug)
#         run: |
#           google-chrome --version || true
#           python -c "import selenium,sys; print('selenium', selenium.__version__); print(sys.version)"
#           echo "FIREFLY_URL=${FIREFLY_URL}"

#       - name: Wait for Firefly to be ready
#         run: |
#           echo "Waiting for ${FIREFLY_URL}..."
#           for i in $(seq 1 40); do
#             if curl -fsSL -o /dev/null "${FIREFLY_URL}/login" || curl -fsSL -o /dev/null "${FIREFLY_URL}/api/v1/ping"; then
#               echo "‚úÖ Firefly is reachable"
#               exit 0
#             fi
#             echo "Attempt $i/40: not ready, sleeping 3s..."
#             sleep 3
#           done
#           echo "‚ùå Firefly did not become ready."
#           curl -I "${FIREFLY_URL}/login" || true
#           exit 1

#       - name: Run Selenium UI tests (headless)
#         run: |
#           cd firefly-UI
#           pytest tests/ -v --disable-warnings --timeout=120

#       - name: Upload test artifacts (optional)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: ui-test-artifacts
#           path: |
#             firefly-UI/reports/**
#             firefly-UI/screenshots/**
#           if-no-files-found: ignore
